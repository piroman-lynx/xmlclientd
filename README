xmlclientd
==========

Демон позволяющий web-приложению асинхронно выполнять внешние соединения (sms-сервисы, smtp, etc)

xmlclientd реализует в себе tcp-клиент для текстовых протоколов.

Фичи
====

* Организует очень быструю и не ресурсоемкую работу с внешними сервисами - до 1000 медленных соединений на 1 ядро CPU
* Минимальный трафик между приложением и xmlclientd - передаются только значащие данные, все остальное хранится в шаблоне xslt на стороне xmlclientd
* Событийный сервер для приема xml
* Событийный клиент для исходящих соединений
* Вы всегда можете задать что делать при каких ошибках клиента в спец-конфиге, так же есть возможность передачи ошибки и ответа в Ваш php/perl/python/etc обработчик
* сложность обработки зависит только от сложности Вашего xml+xslt. Например Вы можете делать запрос sms-сервису, и если лежит один сервис, отправить через другой - все это будет сделано силами xmlclientd

Принцип работы на пальцах
=========================
* Вы пишете xslt-скрипт для преобразования Вашего xml с данными в формат понимаемый xmlclientd (внутренний проткол)
* Вы пишите xml-описание ситуаций с ошибками
* Вы отправляете xml-запрос
* Демон с помощью xslt преобразует xml в нужный формат и выполняет внешние взаимодействия
* При возникновении ошибок Вы получаете запись в лог или демон запускает Ваш обработчик

Принцип работы
==============

Последовательность работы демона:
* Получает от клиента A (web-приложение) входящее соединение и получает xml с данными для соединения
* Отсоединяет клиента A
* Парсит xml, обрабатывает его с помощью xslt - получается документ-описание в стиле внутреннего протокола xmlclientd
* Согласно тем инструкциям которые получились в результате предыдущего пункта:
* 1) Клиент открывает соединение или несколько соединений
* 2) Клиент отправаляет/получает данные, обрабатывает ситуации с помощью предопределений в конфиге и если требуется передает данные на обработку в php

Пример xml-для запроса:
    <xml type="httpsms">
     <tophone>+7 (903) 123-12-12</tophone>
     <text>test</text>
    </xml>

Пример набора команд получаемых в результате обработки xml+xslt:
    SetTimeouts(1) 90s<br>
    Connect(2) tcp://smsservice:80<br>
    Write(3) GET /send/sms HTTP/1.1<br>
    Write(3) Host: smsservice<br>
    Write(3) <br>
    Write(3) {"auth":{"login":"login", "password":"pasword"}, "data":{"phone":"+7 (903) 123-12-12", "text":test"}}<br>
    Write(3) \n<br>
    Read(4) <br>
    Match(5) HTTP/1.1 200 OK<br>

Пример набора предопределния ситуаций с ошибками:
	<xml>
	<error id="3"><action type="default" action="log" /></error>
	<error id="4"><action type="default" action="log" /></error>
	<error id="5"><action type="Match" action="execute" bin="/var/www/cron.php --error=ResponseNot200" response="stdout/pipe" /></error>
	<error id="default"><action type="default" bin="/var/www/cron.php --error=UnCatchableError" response="stdout/pipe" /></error>
	</xml>


Установка на debian
===================
# apt-get install libglib2.0 libglib2.0-dev gcc make cmake
# cmake .
# make
